✳(ns site.fabricate.docs.fabricate
  (:require
   [garden.core :as garden]
   [garden.selectors :refer [root]]
   [garden.stylesheet :as stylesheet]
   [site.fabricate.dev.styles :as styles]
   [site.fabricate.dev.elements :as elements]
   [site.fabricate.dev.build.utils :refer [expr->hiccup str->hiccup]]
   [site.fabricate.prototype.read]
   [site.fabricate.prototype.schema]
   [site.fabricate.prototype.hiccup])) 🔚
✳(def metadata {:title "Fabricate"} )🔚
✳= nil #_elements/header-big 🔚


✳=

(list [:figure {:style {:grid-column "1 / 3"
                        :grid-row "span 2"
                        :margin "0px"}}
       (assoc-in elements/logo-img [1 :style] {:width "100%" :height "100%"})]
[:h1 {:style {:grid-column "3 / 8"
              :text-align "right"
               :font-size "calc(var(--font-big) * 1.75)"}}
  "Fabricate"]
[:div
 [:h2 {:style {:grid-column "1 / 4"
               :font-size "calc(var(--font-big) * 0.8)"
               :margin-bottom "1em"
               :text-align "right"}} 
  [:a {:href "https://www.websters1913.com/words/Fabricate"} "“Form by art and labor”"]]
 [:div {:style {:grid-column "4 / -1"
                :margin-top "1em"
                :margin-left "1.5em"
                :font-size "var(--font-medium)"
                :font-weight "500"
                :font-family "var(--display-sans)"}
        }
   "Simple, flexible website generation with Clojure"
  [:p [:a {:href "https://github.com/fabricate-site/fabricate"
           :style {:font-weight "900"}} "GitHub"]]]
 ]

) 
🔚


Introducing ✳=[:a {:href "https://github.com/fabricate-site/fabricate"} "Fabricate"]🔚, a Clojure library for making static websites, using Clojure.

Fabricate gives you something other tools don't: the power to evaluate Clojure code to generate the contents of a page. The “using Clojure” part of that first sentence contains the core idea: Fabricate is built on the idea that you should be able to use Clojure to generate as much (or little) of your website as is necessary. 

What does that look like?


✳=[:div {:class "subgrid"} [:h2 "Examples"] [:hr]]🔚
✳//[:div {:class "main-track"}
✳+=(let [s "output"]
 (list [:hr]
       [:strong (format "a form evaluated and displayed with its %s" s)])) 🔚
]//🔚
Fabricate gives you a template that allows you to mix regular text and Clojure expressions. Hiccup forms returned by those expressions become HTML elements when Fabricate generates the page.

Fabricate also gives you an API that can generate a website using 3 core functions.
✳=(list
 [:h2 {:style {:grid-column "1 / 3"
               
               :text-align "right"}} "A simple API"]
 [:pre {:class "code-big"
             :style {:grid-column "4 / -1"
                     :font-weight "600"
                     :margin-bottom "0.5em"
                     :font-size "calc(var(--font-big) * 0.45)"
                     :color "var(--color-darkbrown) !important"}}
       (expr->hiccup '(-> {} api/plan! api/assemble api/construct!))
       ]) 🔚
This API, while straightforward enough to quickly get started with, does not constrain what you can do with Fabricate. You can extend Fabricate to new markup formats or other methods of generating pages.

✳= [:div {:style {:margin-top "1.5em"}} [:figure 
   {:style {:grid-column "1 / 4"
            :font-family "var(--display-sans)"
            :font-size "1.2em"
            :margin-right "1em"}}
        [:blockquote {:style {:font-weight "900"}} "Simple things should be simple. Complex things should be possible."]
        [:figcaption {:style {:text-align "left"
                              :margin-left "1em"}} "Alan Kay"]]
[:pre {:style {:grid-column "4 / -1"}} 
 (list
  (str->hiccup "(require '[my-generation-code :refer [generate]])")
  [:br] [:br]
  (expr->hiccup '(defmethod api/build [:my/format :hiccup]
                       [entry options]
                       (generate entry))))] ]🔚

✳= [:div {:class "main-track"} [:h2 "Documentation"] [:hr]]🔚
✳=  [:h3 "Tutorials"] 🔚
These guides will get you up and running with Fabricate, so you can use it as a writing and creative tool. Hopefully you find them useful.

✳=  [:h4 "Tutorial 1: Using Fabricate to add documentation to an existing Clojure project"] 🔚
This ✳=[:a {:href "./tutorials/fabricate-for-docs.html"} "first tutorial"]🔚 allows you to use Fabricate to document a project or library you've built.

✳=  [:h4 "Tutorial 2: Using Fabricate to create a website"] 🔚
🏗️ To be published.

In the second tutorial, you will learn how to publish all the pages you create using Fabricate as a website.

✳=  [:h3 "How-to guides"] 🔚

✳= [:h4 "Supporting Fabricate in Emacs"]🔚

Consult ✳=[:a {:href "/how-to-guides/emacs-setup.html"} "this guide"]🔚 to add support for Fabricate's templates to Emacs.

Further guides (to be published 🏗.)

✳= [:ul {:class "main-track"} [:li "Visualizing data using inline SVGs"]
[:li "Syncing your website with a web server"]
[:li "Publishing your website on Netlify"]
]🔚
✳= [:h3 {:class "text-l"} "Reference"] 🔚
✳=[:ul {:class "main-track"}
 [:li [:a {:href "./reference/template-structure.html"}
"A Reference To Fabricate's Page Templates"]]]🔚
✳=  [:h3  "Background Information"] 🔚
✳=[:ul {:class "main-track"} [:li [:a {:href "./background/finite-schema-machines.html"} "Organizing Computation With Finite Schema Machines"] [:br] "A description of how Fabricate arranges the sequence of transformations to get a HTML page from an input template."]]🔚


✳= [:div {:class "main-track"} [:h2 "Namespaces"] [:hr]]🔚

The namespace descriptions, automatically generated from the namespace forms, introduce the functionality that fabricate assembles to create pages.

✳(defn ns->hiccup [ns form]
  (let [ns-var (find-ns ns)
        metadata (meta ns-var)]
    (apply conj form 
           [:h4 [:code [:a {:href (str "/reference/namespaces/" ns ".html")} (str ns)]]]
           [:p  (clojure.string/replace (:doc metadata) (re-pattern "\n\\s+") " ")]
           #_(into [:dl]
                 (apply concat
                        (for [[k v] (select-keys (meta ns-var) [:doc])]
                          [[:dt [:code (str k)]] [:dd (clojure.string/replace v (re-pattern "\n\\s+") " ")]])))
           [])))🔚

✳= 
(into [:ul {:class "main-track"}]
      (map #(ns->hiccup
             %
             [:li {:class "listed-ns"} ])
           ['site.fabricate.api
            'site.fabricate.prototype.schema
            'site.fabricate.prototype.html
            'site.fabricate.prototype.read
            'site.fabricate.prototype.read.grammar
            'site.fabricate.prototype.hiccup
            ]))
🔚
