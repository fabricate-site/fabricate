âœ³(ns site.fabricate.docs.guides.emacs
  (:require 
   [site.fabricate.prototype.read :as read]
   [garden.core :as garden]
   [site.fabricate.dev.styles :as styles])) ðŸ”š

âœ³(def metadata {:title "Supporting Fabricate's templates in Emacs"
               }) ðŸ”š
âœ³=[:h1 (:title metadata)]ðŸ”š

In its current state, Fabricate is best supported by the Emacs text editor. This is because of the very convenient package âœ³=[:a {:href "https://polymode.github.io/"} [:code "polymode"]]ðŸ”š, which allows for context-sensitive definitions of major modes based on a syntax that uses regular expressions.

I welcome those knowledgeable enough about other editors to add support for Fabricate's syntax to add instructions via a âœ³=[:a {:href "https://github.com/fabricate-site/fabricate/issues"} "Github issue"]ðŸ”š.

The easiest way to set things up is via âœ³=[:a {:href "https://jwiegley.github.io/use-package/"} "use-package"]ðŸ”š. Here's how it works:

âœ³=[:pre [:code
       (read/include-source "resources/fabricate-polymode.el")]]ðŸ”š

Adding this to your config will give you the mode âœ³=[:code "poly-fabricate-mode"]ðŸ”š, which uses âœ³=[:code "fundamental-mode"]ðŸ”š for basic text and âœ³=[:code "clojure-mode"]ðŸ”š for Fabricate expressions. Fully compatible with Cider + REPL use; Fabricate exists in large part because I wanted a static website generator as responsive as my REPL. Now I have it, and you do too.
