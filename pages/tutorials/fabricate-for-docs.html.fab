âœ³(ns site.fabricate.docs.tutorials.documentation
(:require
 [clojure.string :as str]
 [site.fabricate.prototype.read.grammar :as grammar]
 [site.fabricate.dev.styles :as styles]
 [garden.core :as garden]
 [garden.selectors :as select]
 [garden.stylesheet :as stylesheet]
 )) ðŸ”š

âœ³(def metadata {:title "Tutorial: Creating Documentation for Clojure Projects with Fabricate"  })ðŸ”š
âœ³=
(let [[title subtitle] (clojure.string/split (:title metadata) #":")]
  [:div [:h1 {:class "xl-text"} title]
   [:h3 subtitle] [:hr]])ðŸ”š
âœ³=[:h2 "Introduction"]ðŸ”š
âœ³=[:h3 "What you'll learn in this tutorial:"]ðŸ”š
How to use Fabricate alongside your own code to document your project.

âœ³=[:h3 "What you'll need to get started:"]ðŸ”š
âœ³=[:ul [:li "A Clojure project"]
[:li "An installation of the Clojure CLI and tools.deps (any version after 1.10.1.697)"]]ðŸ”š

If your project already uses âœ³=[:code "deps.edn"]ðŸ”š and âœ³=[:code "tools.deps"]ðŸ”š you won't need to make any configuration changes apart from adding an alias. If you use lein or boot, you'll need to do a bit more setup. Lein and boot support are covered in separate guides.


âœ³=[:h3 "What you'll have when you're done:"]ðŸ”š

Some published documentation, hosted with your project, that you can automatically update when your project changes.

âœ³=  [:h3 "How this tutorial works"] ðŸ”š

We'll be doing all the setup we need to do from the Clojure REPL. As long as you can customize how you start your REPL, you can follow the tutorial regardless of which editor or operating system you use.

âœ³(def steps
[{:step/name "Add an alias for Fabricate"
:step/summary "You can add Fabricate as a tool to your project without adding it as a dependency." :step/slug "step-alias"}
{:step/name "Create folders for input documents and output HTML"
:step/summary "Fabricate needs dedicated folders for its content."
:step/slug "step-folders"}
{:step/name "Create your first page template: an introduction to your library" :step/summary "Plain text isn't a bad place to start describing your library." :step/slug "step-intro-page"}
{:step/name "Generate a HTML page from the first template"
:step/slug "step-generate-html" :step/summary "Use Fabricate to see your writing in action."}
#_{:step/name "Create your second page template: an overview of the API for a namespace" :step/slug "step-api-page" :step/summary "This is how you'll use more of Clojure and Fabricate together to automatically derive documentation from Clojure source code and metadata."}
#_{:step/name "Create an index for your documentation" :step/summary "Tie multiple pages together by linking between them." :step/slug "step-index"}
#_{:step/name "Push your documentation to GitHub pages" :step/summary "Publish your docs alongside your project." :step/slug "step-publish"}
]
) ðŸ”š
âœ³= [:h2 "Steps"] ðŸ”š

âœ³= (into [:ol {:class "steps"}]
       (for [{:keys [step/name step/slug step/summary]} steps] [:li {:class "step"} [:b [:a {:href (str "#" slug) } name]] summary]) ) ðŸ”š


âœ³= (let [n 0 step (nth steps n)]
     [:h3 {:id (:step/slug step)} (str "Step " (inc n) ": " (:step/name step))]) ðŸ”š

In your Clojure project's folder, you will have a file called âœ³=[:code "deps.edn"]ðŸ”š. This file contains data used to define information about your project, like the libraries it depends upon, functions that can be used from the Clojure command-line-interface, and where the project's source code and resources can be found.

This file is just an EDN map, defining in plain text an associative array much like Clojure's own hash maps. If you've used JSON before, you can think of EDN like Clojure's version of JSON. The important part is this file maps from certain keys to values - you can add Fabricate to the project by updating the âœ³=[:code ":aliases"]ðŸ”š key with a new key. You might already have aliases defined for your project, in which case you'll add another one for Fabricate. If you don't, then you can just add an âœ³=[:code ":aliases"]ðŸ”š key with the same information.


âœ³= [:div {:style (garden/style {:width "40ch"})}
[:h5 "If you already have aliases defined"]
[:pre [:code {:class "language-clojure"}
       ":aliases {
:test {:extra-paths [\"test\"]
   :extra-deps org.clojure/test.check {:mvn/version \"1.1.0\"}}" [:br]
       [:ins
       ":fabricate {:extra-deps site.fabricate/fabricate"]
[:ins
"    {:git/url \"https://github.com/fabricate-site/fabricate/\""]
[:ins "     :sha \"7fb30c0ead0c03ef0cc4c0133a2329752e0db37b\"}}"]
        "}"
       ]]]ðŸ”š


âœ³= [:div {:style (garden/style {:flex "40%"})}
[:h5 "If your project doesn't have aliases defined yet"]
[:pre [:code {:class "language-clojure"}
"â€¦" [:br]
      [:ins ":aliases {"]
       [:ins
       ":fabricate {:extra-deps site.fabricate/fabricate"]
[:ins
"    {:git/url \"https://github.com/fabricate-site/fabricate/\""]
[:ins "     :sha \"7fb30c0ead0c03ef0cc4c0133a2329752e0db37b\"}}"]
[:ins "}"] "â€¦"
       ]]]ðŸ”š

Once you have this alias, you can test it by launching your Clojure REPL with it:

âœ³=[:pre {:class "shell"} [:code  "clojure -A:fabricate -X:clojure.main/main"]]ðŸ”š

You'll use this REPL for the rest of the tutorial.

âœ³= (let [n 1 step (nth steps n)]
     [:h3 {:id (:step/slug step)} (str "Step " (inc n) ": " (:step/name step))]) ðŸ”š

Run the following commands in your REPL:


âœ³=[:pre {:class "repl"}
[:code {:class "language-clojure"} "(require '[clojure.java.io :as io])"]
[:code {:class "language-clojure"} "(io/make-parents \"./pages/intro.html.fab\")"]
[:code {:class "language-clojure"} "(io/make-parents \"./docs/\")"]
]ðŸ”š

Make sure the files and folders got created:

âœ³=[:pre {:class "repl"}
[:code {:class "language-clojure"} "(.exists (io/file \"./pages/intro.html.fab\"))"]
[:code {:class "language-clojure"} "(let [f (io/file \"./docs/\")]
(and (.exists f) (.isDirectory f)))"]
]ðŸ”š

The results for both of those commands should be âœ³=[:code "true"]ðŸ”š.

âœ³= (let [n 2 step (nth steps n)]
     [:h3 {:id (:step/slug step)} (str "Step " (inc n) ": " (:step/name step))]) ðŸ”š

You might already have some text in a âœ³=[:code "README"]ðŸ”š file somewhere; that's a great starting point. If you don't, take a few minutes to think about the purpose of your code and how to communicate the purpose of that code to someone unfamiliar with it. Try to empathize with someone who might know a bit about Clojure, but knows nothing at all about your library and might be confused by it.

Now you're ready to write. Open the file you created in your editor. Here's a basic structure you can get started with:

âœ³(def example-lines
  (mapv #(format % (first grammar/delimiters) (last grammar/delimiters))
        ["%1$s(ns my-library.docs.intro)%2$s"
         "%1$s(def metadata {:title \"Intro to my library\"})%2$s"
         "%1$s=[:h1 (:title metadata)] %2$s"
"This document gives an overview of the library."]))ðŸ”š

âœ³=[:pre [:code (str/join "\n\n" example-lines)]]ðŸ”š

The first three lines are Fabricate blocks, which contain Clojure code. They start with the âœ³=(first grammar/delimiters)ðŸ”š emoji and end with the âœ³=(last grammar/delimiters)ðŸ”š emoji. Usually they contain only one expression each. The last line is plain text. This is a short snippet, but it contains a few important ideas about Fabricate, so it's worth going through it line-by-line and seeing why each of these lines matters to the final page.

âœ³=[:h5 "Line 1: Each page is a namespace"]ðŸ”š
âœ³=[:pre [:code (nth example-lines 0)]]ðŸ”š

In Fabricate, pages are organized and kept separate from one another by using the same method used to organize ordinary Clojure code: âœ³=[:a {:href "https://clojure.org/reference/namespaces"} "namespaces"]ðŸ”š. You can require libraries, define variables, and do anything you'd do in an ordinary Clojure file in a Fabricate file. Just like an ordinary Clojure file, it's sensible to begin a Fabricate file with a namespace declaration.

âœ³=[:aside "In Fabricate, each block is evaluated by itself, in order - the same way that forms are " [:a {:href "https://clojure.org/reference/evaluation"} "evaluated"] " in Clojure."]ðŸ”š

For more context on how Fabricate uses the file you're writing in to produce a page, you can see the reference docs "anatomy of a Fabricate page template" and "the Fabricate reading process".

âœ³=[:h5 "Line 2: One variable is special: " [:code "metadata"]]ðŸ”š
âœ³=[:pre [:code (nth example-lines 1)]]ðŸ”š

The âœ³=[:code "metadata"]ðŸ”š variable tells Fabricate about the page itself: what its title is, whether it should define any custom CSS, or load any JavaScript. The most visible use of this variable is to set the HTML document âœ³=[:code "&lttitle&gt"]ðŸ”š tag using the âœ³=[:code ":title"]ðŸ”š keyword, so the web browser can give the page a title.

This variable is one of the few that you have to pay special attention to in order to use Fabricate correctly. If you ignore or mess with this variable, things might break!

âœ³=[:aside "If you want to add your own keys to this map that don't overlap with the keys Fabricate already uses - that's always OK. You can and should enhance this with your own metadata if you feel it would be useful."]ðŸ”š

âœ³=[:h5 "Line 3: Use = to produce output"]ðŸ”š
âœ³=[:pre [:code (nth example-lines 2)]]ðŸ”š

This is where Fabricate first produces the contents of the HTML page; by including âœ³=[:code "="]ðŸ”š after the âœ³=(first grammar/delimiters)ðŸ”š emoji, the input file is telling Fabricate to include the result in the page - in this case, a header with the title defined in the âœ³=[:code "metadata"]ðŸ”š variable.

The first two Fabricate expressions in the example code don't produce anything in the output. These are functions that are usually run for their side-effects: declaring the namespace of a page for the first line, and defining a variable by binding the âœ³=[:code "metadata"]ðŸ”š symbol to the hash-map: âœ³=[:code "{:title \"Intro to my library\"}"]ðŸ”š.

This expression is how Fabricate lets you use all of HTML inline, with the full power of Clojure to create and mold it.

âœ³=[:h5 "Line 4: Your own writing"]ðŸ”š
âœ³=[:pre [:code (nth example-lines 3)]]ðŸ”š

Beyond this, it's up to you! Fabricate gives you some tools to help you along, but doesn't impose much of a structure on you. You can define the page you're writing, and the functions you use to help you write, however you see fit.

You should change this line to reflect what your library can do for its users, and what might make it unique.

âœ³= (let [n 3 step (nth steps n)]
     [:h3 {:id (:step/slug step)} (str "Step " (inc n) ": " (:step/name step))]) ðŸ”š

Run Fabricate's âœ³=[:code "publish!"]ðŸ”š function from the  âœ³=[:code "site.fabricate.prototype.write"]ðŸ”š namespace.

You can do this from your REPL, as before:

âœ³=[:pre {:class "repl"} [:code "(require '[site.fabricate.prototype.write :as write])"]
[:code "(write/publish! {:files [\"./pages/intro.html.fab\"]})"]
]ðŸ”š

You should see some output in your REPL about the page getting read, parsed, and evaluated. Don't worry too much about that for the time being. Check to see if your page is there by opening the file in your web browser!
