âœ³(ns site.fabricate.docs.reference.fsm
  (:require [site.fabricate.prototype.page :as page]
            [garden.core :as garden]
            [site.fabricate.styles :as styles]
            [site.fabricate.prototype.fsm :as fsm]
            [site.fabricate.prototype.schema :as schema]
            [site.fabricate.prototype.write :as write]
            [malli.core :as m]
            [malli.util :as mu]
            [malli.dot :as md]
            [dorothy.core :as dot]
            [dorothy.jvm :refer [render]])) ðŸ”š

âœ³(def metadata {:title "A Reference to Fabricate's FSM event loop"
               :page-style (garden/css styles/docs)})ðŸ”š

âœ³=[:h1 {:class "xl-text"} (:title metadata)]ðŸ”š

This page describes how Fabricate's main event loop is organized using a state machine and visually depicts that state machine.

âœ³(def example-graph
  (dot/digraph [{:bgcolor :transparent :fontname "Overpass Regular"}
                (dot/subgraph :main [{:style :filled, :color :lightgrey, :label "Hiccup"}
                                     (dot/node-attrs {:style :filled, :color :white})

                                     [:evaluated :> :html]])

                (dot/subgraph :markdown [
                                         {:color :blue, :label "Markdown"}
                                         (dot/node-attrs {:style :filled})
                                         [:evaluated :> :markdown]])

                [:input :file]
                [:file :read]
                [:read :parsed]
                [:parsed :evaluated]
                [:html :end]
                [:markdown :end]

                [:input {:shape :diamond}]
                [:end   {:shape :square}]]))ðŸ”š

âœ³=[:div (render (dot/dot example-graph) {:format :svg})]ðŸ”š

âœ³(def terminal-fsm-states
  (filter (fn [s]
            (let [p (m/properties s)]
                      (and (= :fsm/exit (:fsm/state p))
                           (:fsm/side-effect? p))))
          (keys write/default-operations)))ðŸ”š

âœ³(def fsm-ops (apply dissoc write/default-operations terminal-fsm-states))ðŸ”š

âœ³ (def iterated-fsms
  (->> (:examples (m/properties write/input-state))
       (map
        (fn [v]
          [v (reduce
              (fn [states next-state]
                (if (= (:fsm/value (peek states))
                       (:fsm/value next-state))
                  (reduced states)
                  (conj states next-state)))
              []
              (iterate
               (fn [v] (fsm/advance fsm-ops v write/initial-state)) {:fsm/value v}))]))
       (into {})))ðŸ”š

âœ³(comment

   (do (println "test fsm:")
       (keys
        (:fsm/value (fsm/complete fsm-ops
                                  {:fsm/value "README.md.fab"}
                                  write/default-site-settings))))

   (:errors
    (m/explain
     write/read-state
     (:fsm/value (fsm/complete
                  fsm-ops
                  (last (iterated-fsms "README.md.fab"))
                  write/default-site-settings))

     ))

   (keys (write/eval-parsed-page
          (write/parse-contents
           (:fsm/value (fsm/complete
                        fsm-ops
                        (last (iterated-fsms "README.md.fab"))
                        write/default-site-settings))
           write/default-site-settings)

          write/default-site-settings))

   )ðŸ”š

âœ³=[:pre
 (apply conj [:code {:class "language-clojure"}]
        (map (fn [[k v]]
               (apply conj [:div [:h5 k]]
                      (map #(if (:fsm/matched-state %)
                              [:span " "
                               (:fsm/name
                                (m/properties (:fsm/matched-state % )))]) v))
               ) iterated-fsms))]ðŸ”š

âœ³=[:h3 {:class "l-text"} "State definitions"]ðŸ”š

These are the visualizations of each state for a page, produced using âœ³=[:code "malli.util/dot"]ðŸ”š.

âœ³=
(apply conj [:div]
(map (fn [[k _]]
[:div [:h5 (:fsm/name (m/properties k))]
  [:p (:fsm/description (m/properties k))]
  (render (md/transform k) {:format :svg})]
              ) write/default-operations))
ðŸ”š
