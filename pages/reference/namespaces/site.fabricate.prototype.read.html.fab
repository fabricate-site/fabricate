âœ³(ns site.fabricate.docs.reference.namespaces.read
     (:require [site.fabricate.prototype.read :as read]
               [site.fabricate.prototype.page :as page]
               [site.fabricate.adorn :as adorn]
               [malli.core :as m]
               [garden.core :as garden]
               [site.fabricate.dev.styles :as styles]))ğŸ”š

âœ³(def metadata {:title "site.fabricate.prototype.read Namespace"
               :page-style  (garden/css styles/docs)})ğŸ”š
âœ³(def doc-ns (find-ns 'site.fabricate.prototype.read))ğŸ”š

âœ³=[:div
  [:h1 [:code "site.fabricate.prototype.read"] " Namespace"]
   (:doc (meta doc-ns))]ğŸ”š

The grammar of page templates is defined in the âœ³=[:a {:href "/reference/namespaces/site.fabricate.prototype.read.grammar.html"} [:code "site.fabricate.prototype.read.grammar"] " namespace"]ğŸ”š. This namespace builds on that one to walk through the parse tree of Clojure expressions produced by the template grammar and evaluate them.

An overview of the template grammar with examples is provided in the page âœ³=[:a {:href "/reference/template-structure.html"} "A Reference to Fabricate's Page Templates"]ğŸ”š.

âœ³(def vars (ns-publics doc-ns))ğŸ”š

âœ³=[:h2 "Functions"]ğŸ”š

âœ³= [:div (->> vars
         (filter (fn [[k v]] (fn? (var-get v))))
         (reduce (fn [l [k v]]
(conj l [:dt [:code {:class "language-clojure symbol"} k]]
      [:dd [:dl
            [:dt "Description" ]
            [:dd (:doc (meta v))]
            [:dt "Arguments"]
            [:dd
             (apply conj [:ul {:style (garden/style {:list-style-type "none"})}]
                    (map (fn [a]
                           [:li [:code {:class "language-clojure"}
                                 (adorn/clj->hiccup a)]])
                         (:arglists (meta v))))]]]))
                 [:dl]))]ğŸ”š

âœ³=[:h2 "Constants"]ğŸ”š

âœ³= [:div (->> vars
         (filter (fn [[k v]] (not (fn? (var-get v)))))
         (reduce (fn [l [k v]]
(conj l [:dt [:code {:class "language-clojure symbol"} k]]
      [:dd [:dl [:dt "Description"] [:dd (:doc (meta v))]
            [:dt "Type"]
            [:dd [:code (adorn/clj->hiccup (type (var-get v)))]]]]))
                 [:dl]))]ğŸ”š
