âœ³(ns site.fabricate.docs.reference.namespaces.grammar
     (:require [site.fabricate.prototype.read.grammar :as grammar]
               [instaparse.core :as insta]
               [instaparse.print :refer [Parser->str]]
               [site.fabricate.prototype.page :as page]
               [malli.core :as m]
               [garden.core :as garden]
               [site.fabricate.styles :as styles])) ğŸ”š

âœ³(def metadata {:title "site.fabricate.prototype.read.grammar Namespace"
               :page-style  (garden/css styles/docs)}) ğŸ”š
âœ³(def doc-ns (find-ns 'site.fabricate.prototype.read.grammar)) ğŸ”š

âœ³=[:div
  [:h1 [:code "site.fabricate.prototype.read.grammar"] " Namespace"]
   (:doc (meta doc-ns))]ğŸ”š

âœ³(def vars (ns-publics doc-ns)) ğŸ”š
âœ³=[:h2 "The grammar definition"]ğŸ”š
This âœ³=[:a {:href "https://github.com/engelberg/instaparse"} [:code "Instaparse"]]ğŸ”š grammar defines the structure of Fabricate templates. Once parsed into an Instaparse parse tree, the âœ³=[:a {:href "/reference/namespaces/site.fabricate.prototype.read.html"} [:code "read"] " namespace"]ğŸ”š walks the parsed template and evaluates the expressions embedded within it. The grammar, as defined, intentionally does not concern itself with whether the contents of the expressions in each template are syntactically valid Clojure forms; that task is left to the reader. Defining the grammar this way allows Clojure read errors to be caught and handled on a form-by-form basis instead of throwing an error for the whole page.

âœ³=[:pre (Parser->str (var-get ('template vars)))]ğŸ”š

For an informal guide to how these templates get used with examples, please see the page âœ³=[:a {:href "/reference/template-structure.html"} "A Reference to Fabricate's Page Templates"]ğŸ”š.
âœ³=[:h2 "Constants"]ğŸ”š

âœ³= [:div (->> vars
         (filter (fn [[k v]] (not (fn? (var-get v)))))
         (reduce (fn [l [k v]]
(conj l [:dt [:code {:class "language-clojure symbol"} k]]
      [:dd [:dl [:dt "Description"] [:dd (:doc (meta v))]
            [:dt "Type"]
            [:dd [:code (page/expr->hiccup (type (var-get v)))]]]]))
                 [:dl]))]ğŸ”š
