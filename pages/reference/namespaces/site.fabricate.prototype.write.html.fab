âœ³(ns site.fabricate.docs.reference.namespaces.write
     (:require [site.fabricate.prototype.write :as write]
               [site.fabricate.prototype.page :as page]
               [malli.core :as m]
               [garden.core :as garden]
               [site.fabricate.styles :as styles]))ğŸ”š

âœ³(def metadata {:title "site.fabricate.prototype.write Namespace"
               :page-style  (garden/css styles/docs)})ğŸ”š
âœ³(def write-ns (find-ns 'site.fabricate.prototype.write))ğŸ”š

âœ³=[:h1 [:code "site.fabricate.prototype.write"] " Namespace"]ğŸ”š

âœ³=[:div (:doc (meta write-ns))]ğŸ”š

âœ³(def vars (ns-publics write-ns))ğŸ”š

âœ³=[:h2 "Functions"]ğŸ”š

âœ³= [:div (->> vars
         (filter (fn [[k v]] (fn? (var-get v))))
         (reduce (fn [l [k v]]
(conj l [:dt [:code {:class "language-clojure symbol"} k]]
      [:dd [:dl
            [:dt "Description" ]
            [:dd (:doc (meta v))]
            [:dt "Arguments"]
            [:dd
             (apply conj [:ul {:style (garden/style {:list-style-type "none"})}]
                    (map (fn [a]
                           [:li [:code {:class "language-clojure"}
                                 (page/expr->hiccup a)]])
                         (:arglists (meta v))))]]]))
                 [:dl]))]ğŸ”š

âœ³=[:h2 "Constants"]ğŸ”š

âœ³= [:div (->> vars
         (filter (fn [[k v]] (not (fn? (var-get v)))))
         (reduce (fn [l [k v]]
(conj l [:dt [:code {:class "language-clojure symbol"} k]]
      [:dd [:dl [:dt "Description"] [:dd (:doc (meta v))]
            [:dt "Type"]
            [:dd [:code (page/expr->hiccup (type (var-get v)))]]]]))
                 [:dl]))]ğŸ”š
