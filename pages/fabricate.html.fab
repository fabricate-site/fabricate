âœ³ (ns site.fabricate.docs.fabricate
  (:require [garden.core :as garden]
            [garden.selectors :refer [root]]
            [garden.stylesheet :as stylesheet]
            [site.fabricate.styles :as styles]
            [site.fabricate.prototype.check]
            [site.fabricate.prototype.read]
            [site.fabricate.prototype.schema]
            [site.fabricate.prototype.fsm]
            [site.fabricate.prototype.write]
            [site.fabricate.prototype.page])) ðŸ”š

âœ³ (def page-css
  (garden/css styles/docs)
    #_(garden/css
       (garden.stylesheet/at-import "https://fonts.googleapis.com/css2?family=Epilogue:ital@0..1,wght@100..900" )
       (garden.stylesheet/at-import "https://fonts.googleapis.com/css2?family=Atkinson+Hyperlegible:ital,wght@0,400;0,700;1,400;1,700&display=swap")
       (garden.stylesheet/at-import  "https://fonts.googleapis.com/css2?family=Overpass+Mono&display=swap")
       [:html {:font-family "'Atkinson Hyperlegible', sans-serif"
               :font-size "1rem"
               :line-height "1.25"
               :max-width "60ch"
               :box-sizing "border-box"
               :background-color "#EEE"}]
       [:h1 :h2 :h3 :h4 :h5 :h6 {:font-family "Epilogue"
                                 :text-transform "uppercase"}
        [:code {:text-transform "none"}]]
       [:html :body :div :header :article :nav :main :footer
        {:max-width "none"}]
       [:h1 {:font-size (str (Math/pow 1.618033 3) "em")
             :margin-bottom "0em"
             :margin-top "0em"
             :line-height "1.25"
             :font-weight "850"}]
       [:h2 {:font-size (str (Math/pow 1.618033 2) "em")
             :margin-top (str (Math/pow 1.618033 -2) "em")
             :margin-bottom "0em"}]
       [:h3 :h4 :h5 :h6 {:margin-bottom "0em"}]
       [:hr {:border "0.25em solid #B4501D"}]
       [:dt {:margin-top "0em"}]
       [:dd {:margin-top "0em"}]
       [:code {:font-family "Overpass Mono"}]
       [:pre {:white-space "pre-wrap"
              :font-family "Overpass Mono"
              :font-size "0.95rem"}]

       )) ðŸ”š

âœ³(def metadata {:title "Fabricate"
                :page-style page-css} )ðŸ”š

âœ³= [:div [:h1 {:class "xl-text"} (:title metadata)] [:hr]
    [:h4 "Form by art and labor"]]ðŸ”š

Introducing âœ³=[:a {:href "github.com/fabricate-site/fabricate"} "Fabricate"]ðŸ”š, a Clojure library for making static websites, using Clojure.

Fabricate takes a different approach than markdown and notebook-based tools, which frequently assume a one-size fits all approach to displaying code: if there's code in a markdown block, it's included in the output. I made Fabricate so that I could program more of my layout, and so that I could choose when and where to display both Clojure expressions and their results.

Rather than deriving the layout from a generic approach that treats "code blocks" and "text" as distinct entities, Fabricate lets you embed the results of any expression right in the text, eschewing markup formats in favor of inline Hiccup elements.

âœ³=[:div [:h2 "Examples"] [:hr]]ðŸ”š

âœ³//[:div

âœ³+=(let [s "output"]
    [:h4 (format "a form evaluated and displayed with its %s" s)]) ðŸ”š

]//ðŸ”š

âœ³= [:div [:h2 "Documentation"] [:hr]]ðŸ”š
âœ³= [:div [:h3 "Tutorials"] ]ðŸ”š
These guides will get you up and running with Fabricate, so you can use it as a writing and creative tool. Hopefully you find them useful.

âœ³= [:div [:h4 "Tutorial 1: Using Fabricate to add documentation to an existing Clojure project"] ]ðŸ”š
This âœ³=[:a {:href "./tutorials/fabricate-for-docs.html"} "first tutorial"]ðŸ”š allows you to use Fabricate to document a project or library you've built.

âœ³= [:div [:h4 "Tutorial 2: Using Fabricate to create a website"] ]ðŸ”š
In the second tutorial, you will learn how to publish all the pages you create using Fabricate as a website.


âœ³= [:div [:h3 {:class "text-l"} "How-to guides"] ]ðŸ”š
âœ³= [:ul [:li "Visualizing data using inline SVGs"]
[:li "Syncing your website with a web server"]
[:li "Publishing your website on Netlify"]
]ðŸ”š
âœ³= [:div [:h3 {:class "text-l"} "Reference"] ]ðŸ”š
âœ³=[:ul [:li [:a {:href "./reference/template-structure.html"}
"A Reference To Fabricate's Page Templates"]]]ðŸ”š
âœ³= [:div [:h3 {:class "text-l"} "Background Information"] ]ðŸ”š
âœ³=[:ul [:li [:a {:href "./background/finite-schema-machines.html"} "Organizing Computation With Finite Schema Machines"] [:br] "A description of how Fabricate arranges the sequence of transformations to get a HTML page from an input template."]]ðŸ”š


âœ³= [:div [:h2 "Namespaces"] [:hr]]ðŸ”š

The namespace descriptions, automatically generated from the namespace forms, introduce the functionality that fabricate assembles to create pages.

âœ³(defn ns->hiccup [ns form]
  (let [ns-var (find-ns ns)
        metadata (meta ns-var)]
    (apply conj form [:h4 #_{:class "stack-small"} [:code (str ns)]]
           (into [:dl]
                 (apply concat
                        (for [[k v] (select-keys (meta ns-var) [:doc])]
                          [[:dt #_ {:class "stack-small"} [:code (str k)]] [:dd (clojure.string/replace v (re-pattern "\n\\s+") " ")]])))
           [])))ðŸ”š

âœ³= [:div {:class "stack"}
    (apply conj [:ul #_{:class "stack"}]
           (map #(ns->hiccup % [:li #_{:class "stack-large"}])
                ['site.fabricate.prototype.schema
                 'site.fabricate.prototype.html
                 'site.fabricate.prototype.read
                 'site.fabricate.prototype.read.grammar
                 'site.fabricate.prototype.page
                 'site.fabricate.prototype.fsm
                 'site.fabricate.prototype.write]))]
ðŸ”š
