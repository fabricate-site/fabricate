âœ³(ns site.fabricate.docs.design.identifiers
  (:require [cybermonday.ir :as md-ir]
            [site.fabricate.dev.build.utils :as build-utils]))ðŸ”š


âœ³(def metadata {:title "Design doc: identifiers"})ðŸ”š
âœ³= [:h1 {:class "big-text"} (:title metadata)]ðŸ”š

âœ³= [:span {:class "medium-text"
         } [:strong "Status:"] " Pre-prototype design doc. Not yet ready for inclusion in Fabricate proper - just clarifying concepts for the purposes of writing functions necessary to generate Fabricate's own docs. Code that implements these ideas may be spun out into a separate library intended to be used with Fabricate."]ðŸ”š

âœ³= [:h2 "What makes a unique identifier?"]ðŸ”š


âœ³= [:ul [:li "For a HTML element?"] [:li "For a term with a specific meaning in the context of a project?"] [:li "For a Fabricate entry?"]]ðŸ”š

The HTML5 specification only states that:
âœ³= [:figure 
[:blockquote
"the id attribute value must be unique amongst all the IDs in the element's
tree and must contain at least one character. The value must not contain any
ASCII whitespace."]
[:figcaption [:a {:href "https://html.spec.whatwg.org/multipage/dom.html#the-id-attribute"} "WHATWG HTML Living Standard (2024-11-26)"]]
]ðŸ”š

EDN's specification of symbols is:


âœ³= [:figure [:blockquote
           [:p "Symbols are used to represent identifiers, and should map to something other than strings, if possible."]

           [:p "Symbols begin with a non-numeric character and can contain alphanumeric characters and " [:strong ". * + ! - _ ? $ % & = < >"] ". If -, + or . are the first character, the second character (if any) must be non-numeric. Additionally, : # are allowed as constituent characters in symbols other than as the first character."]

           [:p "/ has special meaning in symbols. It can be used once only in the middle of a symbol to separate the prefix (often a namespace) from the name, e.g. my-namespace/foo. / by itself is a legal symbol, but otherwise neither the prefix nor the name part can be empty when the symbol contains /. "]

           [:p "If a symbol has a prefix and /, the following name component should follow the first-character restrictions for symbols as a whole. This is to avoid ambiguity in reading contexts where prefixes might be presumed as implicitly included namespaces and elided thereafter."]
]
  [:figcaption [:a {:href "https://github.com/edn-format/edn#symbols"}
                "EDN format: symbols"]]
]ðŸ”š


This is a strict subset of the HTML rules for identifiers. Obeying the rules
for Clojure symbols thus automatically produces valid HTML ID values.

The rules for keywords are as follows:

âœ³=
[:figure [:blockquote
          "Keywords are identifiers that typically designate themselves. They are
semantically akin to enumeration values. Keywords follow the rules of
symbols, except they can (and must) begin with :, e.g. :fred or :my/fred. If
the target platform does not have a keyword type distinct from a symbol
type, the same type can be used without conflict, since the mandatory leading : of
keywords is disallowed for symbols. Per the symbol rules above, :/ and
:/anything are not legal keywords. A keyword cannot begin with ::"
           
]
  [:figcaption [:a {:href "https://github.com/edn-format/edn#keywords"}
                "EDN format: keywords"]]
]
 ðŸ”š

Obeying these rules will also produce valid HTML IDs.


This makes a fully-qualified symbol, or a keyword in a defined namespace, a
very effective globally-unique
identifier for an element in a page, a key in a lookup table, a name for
an entry, or anything else.


âœ³= [:h2 "Motivating questions and use cases"]ðŸ”š

The original question that motivated detailed consideration of "identifiers" in the context of Fabricate was symbol and keyword resolution in docstrings. cljdoc, an important piece of prior art, resolves symbols and namespaces to produce links for the pages generated from docstrings, following the convention established by Martin Klepsch, which he described in âœ³[:a {:href "https://www.martinklepsch.org/posts/writing-awesome-docstrings.html"} "4 Small Steps Towards Awesome Clojure Docstrings"]ðŸ”š 

The general idea is that if you put a fully-qualified keyword or symbol in double brackets in a docstring, that symbol or keyword can be resolved and thus linked to when the docstring is used to generate the contents of a page. That implies that the symbol's identifier establishes a "canonical location" for where to look that symbol up - in this case, a mapping from a symbol or keyword to a URL.

Looking things up by name:
âœ³= [:ul [:li [:strong "Symbols:"] " A link to the documentation for the var with that name"]
[:li [:strong "Vars:"] " A link to the documentation for the var with that name"]
 [:li [:strong "Keywords:"] " See above - keywords can't carry metadata and they \"refer to themselves\", which means that adding documentation for a keyword is an antipattern.
However, within the context of a Clojure program, a keyword can designate a spec. Equivalently, a keyword can also name an entry in a Malli registry.
"]
[:li [:strong "Terms: "] "Fabricate has lots of words with special meanings. It would be good to call those out, and link to their definitions, in addition to symbols, vars, and other Clojure values." ]

 ]ðŸ”š

"Term" is a more encompassing concept than "keyword". A term could have a keyword representation, or it might not. A term can have more than one word. On that basis, it should be assumed that a term is unique to a specific project. This means, for example, distinguishing "source location" as a term from "page location".


âœ³= [:h2 "Plaintext/Markdown Notation"]ðŸ”š

For simplicity's sake I will largely adapt the Clojure notation for these things, leaving unadorned text to refer to key terms, as in an ordinary âœ³= [:a {:href "https://en.wikipedia.org/wiki/Help:Link"} "Wikilink"]ðŸ”š. 

Even though symbols don't need to have a leading ' character, it will be useful to unambiguously distinguish them from ordinary text, which will connote terms.



âœ³= [:dl {:class "main-track"}
  [:dt "Term"] [:dd [:code "[[Source Location]]"]]
  [:dt "Keyword"] [:dd [:code "[[:site.fabricate.api/entry]]"]]
  [:dt "Symbol"] [:dd [:code "[['site.fabricate.api/plan!]]"]]
  [:dt "Var"] [:dd [:code "[[#'site.fabricate.api/plan!]]"]]
  [:dt "Argument"] [:dd [:code "`fn-argument`"]]
  ]ðŸ”š

These differ from Klepsch's recommendations in that double-bracket links are not assumed to be symbols by default. Doing things this way allows me to link to ordinary words, and rely on the Clojure reader for other contents of double-bracket links. 

âœ³= [:h3 "What I will do differently"]ðŸ”š

I will not follow recommendations 3 and 4 from "4 Small Steps Towards Awesome Clojure Docstrings". I strongly believe that data structures are always to be preferred to strings. I will not use strings to denote important code examples or complex data structures like tables. Instead, I will rely on the approach of fully embracing metadata for this purpose, the way  âœ³= [:code [:a {:href "https://gitlab.com/glossa/metazoa"} "metazoa"]]ðŸ”š does.


âœ³= [:h2 "Notation/designation for Clojure values"]ðŸ”š

Fabricate's templates allow me to name "terms" directly by using metadata or functions or anything else that Clojure provides.

âœ³= [:h2 "Standardization"]ðŸ”š

Symbols and vars are treated differently according to the above parse table. What if a symbol resolves to a var?

Standardization should be all done in one place, by the same function, regardless of the source type that produces an identifier. I shouldn't need to worry about whether I used wikilink markdown brackets or a custom Chassis Hiccup element to produce an identifier. This means that the assemble step should perform the standardization and resolution of the link to the identifier's canonical definition.

Or should the produce step do this? On the one hand, I like the idea of just letting Chassis do the work, on the assumption that all the necessary structured content already exists by the time the produce step comes around. On the other, I like the idea of having pages be "just data" with discrete (immutable) values by the end of the assemble step.

I could just postwalk the hiccup myself and perform the same dereferencing/evaluation that chassis does in an "eager" rather than "lazy" fashion.

âœ³= [:h2 "Resolution"]ðŸ”š

Remember: you don't need to ensure an anchor/id in a page exists prior to generating the link that targets that anchor. The reference to an identifier can just produce a link, and then the âœ³= [:em "page"]ðŸ”š for that link can perform the necessary lookup for that term.

But how does that page know about all the references/identifiers that appear across all other pages? Some kind of global registry may need to exist in order to do this correctly.

One possible way: data attributes. âœ³= [:code "data-term=clojure.core/str"]ðŸ”š conveys important information and could be parsed out of a Hiccup structure. This is simple and effective. 

But what about identifiers for non-fabricate things? Like a function from clojure.core?