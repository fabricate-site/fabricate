(ns site.fabricate.prototype.read.grammar-test
  (:require [site.fabricate.prototype.read.grammar  :refer :all]
            [instaparse.core :as insta]
            [clojure.java.io :as io]
            [clojure.test :as t]))

(t/deftest parser

  (t/testing "rules"
    (t/is (insta/failure?
           (template "some text with unbalanced iniital âœ³ and more txt"
                     :rule :txt))))

  (t/testing "simple forms"
    (t/is (not (insta/failure? (template "âœ³=abcdðŸ”š some text"))))
    (t/is (not (insta/failure? (template "text (with parens) and an expr âœ³=(+ 3 4 5)ðŸ”š"))))
    (t/is (not (insta/failure? (template "text (with parens) and an expr âœ³=(+ 3 4 5)ðŸ”š and a trailing newline\n"))))
    (t/is (not (insta/failure? (template "text/text and an expr âœ³=(+ 3 4 5)ðŸ”š")))
          "Grammar should recognize plaintext with common usage of special characters")
    (t/is (not (insta/failure? (template "âœ³=(+ 3 4 5)ðŸ”š some text"))))
    (t/is (not (insta/failure? (template "âœ³=(my.ns/fn  22)ðŸ”š some text"))))
    (t/is (not (insta/failure? (template "âœ³(def something 2)ðŸ”š some text"))))
    (t/is (not (insta/failure? (template "some text âœ³(def something 2)ðŸ”š some text"))))
    #_(t/is (not (insta/failure? (template "text âœ³//\nmore text //ðŸ”š âœ³(+ 3 4)ðŸ”š"))))

    #_(t/is (not (insta/failure?
                  (template
                   "text âœ³// more text
âœ³(+ 3 4)ðŸ”š
separate paragraphs
âœ³=(into [:div] (map inc (range 32 21 -1)))ðŸ”š
text
 //ðŸ”š "))))))

(t/deftest pages
  (t/testing "ambiguity"
    (doseq [f ["./pages/finite-schema-machines.html.fab"
               "./pages/fabricate.html.fab"
               "./README.md.fab"]]
      (let [c (slurp f)]
        (t/testing (str "in input file: " f)
          (t/is (not (insta/failure? (template c)))
                "Each template should successfully parse")
          #_(t/is (= 1 (count
                        (take 2 (insta/parses template c))))
                  "Each template should parse only once and exactly once"))))))


(comment

  (require '[criterium.core :as crit])

  ()

  (template "some final text - true/false")

  (template "
âœ³=[:h1 (:title metadata)]ðŸ”š

âœ³=[:h4 \"form by art and labor\"]ðŸ”š


Introducing fabricate, a Clojure library for making static websites, using Clojure.

")


  (template (slurp "./pages/fabricate.html.fab")
            :total true)

  (template (slurp "./pages/finite-schema-machines.html.fab"))

  (doseq [p (insta/parses
             template
             (slurp "./pages/finite-schema-machines.html.fab"))]
    (println p))

  (count (take 50 (insta/parses template
                                (slurp "./pages/finite-schema-machines.html.fab"))))

  (template "text (with parens) and an expr âœ³=(+ 3 4 5)ðŸ”š" :trace true)
  (template
   "text âœ³// more text
âœ³(+ 3 4)ðŸ”š
separate paragraphs
âœ³=(into [:div] (map inc (range 32 21 -1)))ðŸ”š
text
 //ðŸ”š " :total true)



  (template (slurp "./README.md.fab") :trace true)

  )
