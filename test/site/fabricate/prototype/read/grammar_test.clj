(ns site.fabricate.prototype.read.grammar-test
  (:require [site.fabricate.prototype.read.grammar  :refer :all]
            [instaparse.core :as insta]
            [clojure.java.io :as io]
            [clojure.test :as t]))

(t/deftest parser

  (t/testing "simple forms"
    (t/is (not (insta/failure? (template "âœ³=abcdğŸ”š some text"))))
    (t/is (not (insta/failure? (template "text (with parens) and an expr âœ³=(+ 3 4 5)ğŸ”š"))))
    (t/is (not (insta/failure? (template "text/text and an expr âœ³=(+ 3 4 5)ğŸ”š"))))
    (t/is (not (insta/failure? (template "âœ³=(+ 3 4 5)ğŸ”š some text"))))
    (t/is (not (insta/failure? (template "âœ³=(my.ns/fn  22)ğŸ”š some text"))))
    (t/is (not (insta/failure? (template "âœ³(def something 2)ğŸ”š some text"))))
    (t/is (not (insta/failure? (template "some text âœ³(def something 2)ğŸ”š some text"))))
    (t/is (not (insta/failure? (template "text âœ³// more text //ğŸ”š âœ³(+ 3 4)ğŸ”š"))))

    (t/is (not (insta/failure?
                (template
                 "text âœ³// more text
âœ³(+ 3 4)ğŸ”š
separate paragraphs
âœ³=(into [:div] (map inc (range 32 21 -1)))ğŸ”š
text
 //ğŸ”š ")))))

  (t/testing "ambiguity"
    (doseq [f ["./pages/finite-schema-machines.html.fab"
               "./pages/fabricate.html.fab"
               "./README.md.fab"]]
      (let [c (slurp f)]
        (t/testing (str "in input file: " f)
          (t/is (not (insta/failure? (template c))))
          (t/is (= 1 (count (insta/parses template c)))
                "Each parser should parse only once and exactly once"))))))


(comment

  (template (slurp "./pages/fabricate.html.fab"))

  (template (slurp "./pages/finite-schema-machines.html.fab")
            :trace true)

  (template "text (with parens) and an expr âœ³=(+ 3 4 5)ğŸ”š" :trace true)
  (template
                 "text âœ³// more text
âœ³(+ 3 4)ğŸ”š
separate paragraphs
âœ³=(into [:div] (map inc (range 32 21 -1)))ğŸ”š
text
 //ğŸ”š " :total true)



  (template (slurp "./README.md.fab") :trace true)

  )
