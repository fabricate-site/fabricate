(ns site.fabricate.prototype.read.grammar
  (:require [instaparse.core :as insta]))

(comment (require '[lambdaisland.regal :as regal])

         ;; the general idea here is :
         ;; if the terminal is present, match all text before it
         ;; (match without capturing)
         ;; if it is not present, match all the text

         ;; first branch of the conditional - match without capturing
         ;; with terminal pattern present

         (let [re #"(.*?)(?:(?:\*)?)"]
           (println "regex" (.toString re))
           (println "matches?" (re-matches re "text with ending*"))
           (println "matches?" (re-matches re "text without ending"))
           )

         )

(def template
  (insta/parser
   "template = EPSILON | ( expr | txt | extended-form )*
    expr = 'âœ³' #'=?[^ðŸ”š]*' 'ðŸ”š'
    txt = #'[^âœ³]*'
    form-open = 'âœ³//'
    form-close = '//ðŸ”š'
    extended-form = form-open ( expr | txt )* form-close "))

(comment

  (re-matches #"//" "//")

  (template "âœ³// text more text //ðŸ”š âœ³nilðŸ”š")

  (template "text (with parens)")

  (template "âœ³// text more text //ðŸ”š âœ³(+ 3 4)ðŸ”š")

  (template "âœ³// text, followed by expr âœ³(+ 3 4)ðŸ”š and text //ðŸ”š âœ³(+ 3 4)ðŸ”š")

  (insta/parse template "some/text" :trace true)



  )
