(ns site.fabricate.prototype.read.grammar
  (:require [instaparse.core :as insta]))

(comment (require '[lambdaisland.regal :as regal])

         ;; the general idea here is :
         ;; if the terminal is present, match all text before it
         ;; (match without capturing)
         ;; if it is not present, match all the text

         ;; same regex matching on both, no char included
         (re-seq #"^.*?(?=ğŸ”š|$)" "text with endingğŸ”š")

         (re-seq #"^.*?(?=ğŸ”š|$)" "text ")

         ;; reluctant quantifiers are the key here

         (re-seq #"^.*?(?=(?:ğŸ”š)|$)" "text with endingğŸ”š")
         (re-seq #"^.*?(?=(?:/{2}?ğŸ”š)|$)" "text with ending//ğŸ”š")

         (re-seq #"^.*?(?=(?:ğŸ”š)|$)" "text ")
         (re-seq #"^.*?(?=(?:/?/?ğŸ”š)|$)" "text ")

         (insta/parse
          (insta/parser "rule = ( text | terminal) *
                         text = #'^.*?(?=ğŸ”š|$)'
                         terminal = 'ğŸ”š'")
          "text with endingğŸ”š")

         )

(def template
  (insta/parser
   "template = EPSILON | ( expr | txt | extended-form )*
    expr = 'âœ³' #'=?[^ğŸ”š]*' 'ğŸ”š'
    txt = #'[^âœ³]*'
    form-open = 'âœ³//'
    form-close = '//ğŸ”š'
    extended-form = form-open ( expr | txt )* form-close "))

(comment

  (re-matches #"//" "//")

  (template "âœ³// text more text //ğŸ”š âœ³nilğŸ”š")

  (template "text (with parens)")

  (template "âœ³// text more text //ğŸ”š âœ³(+ 3 4)ğŸ”š")

  (template "âœ³// text, followed by expr âœ³(+ 3 4)ğŸ”š and text //ğŸ”š âœ³(+ 3 4)ğŸ”š")

  (insta/parse template "some/text" :trace true)



  )
